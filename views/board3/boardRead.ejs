<%- include ("../common/header") %>
	<script>
		// https://velog.io/@rkio/Javascript-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C-%EA%B5%AC%ED%98%84
		// 서버파일 다운로드 용
		async function downloadFile(fileUrl) {
			const baseurl = '/board/download';
			const params = {  // 필요한 query params를 {} 형태에 담아준다.
				fileUrl: fileUrl,
			};
			const queryString = new URLSearchParams(params).toString();  // url에 쓰기 적합한 querySting으로 return 해준다. 
			const requrl = `${baseurl}?${queryString}`;   // 완성된 요청 url.
			const link = document.createElement("a");
			// a 태그 클릭시 다운로드 될 파일의 경로이다.
			link.href = requrl;
			// body에 a 태그를 추가한다.
			document.body.appendChild(link);
			// a 태그를 강제로 클릭한다.
			link.click();
			// a 태그를 제거한다.
			link.remove();
			// 생성했던 url도 제거해준다.
			window.URL.revokeObjectURL(requrl);
		}
		// 파이어베이스 스토어파일 다운로드 사용 취소
		async function handleFileDownload(publicUrl) {
			//const outsideRes = await fetch(publicUrl);
			//const blob = await outsideRes.blob();
			//const url = window.URL.createObjectURL(blob);
			const link = document.createElement('a');
			// 생성한 URL과 다운로드할 파일명 설정
			link.setAttribute('href', url);
			link.setAttribute('download', 'download');
			link.setAttribute('target', '_self');
			// 링크를 문서(body)에 추가
			document.body.appendChild(link);
			// 링크 클릭 => 파일 다운로드
			link.click();
			// 다운로드 후 링크와 URL을 정리
			link.parentNode.removeChild(link);
			window.URL.revokeObjectURL(url)
		}
	</script>
	<h2>게시글 보기</h2>
	<div class="col-md-12">
		<form id="form_posts" action="" method="post">
			<div class="form-group">
				<label for="id">작성일시</label>
				<input type="text" class="form-control" id="id" value="<%=row.brddate%>" readonly>
			</div>
			<div class="form-group">
				<label for="title">제목</label>
				<input type="text" class="form-control" id="title" value="<%=row.brdtitle%>" readonly>
			</div>
			<div class="form-group">
				<label for="author"> 작성자</label>
				<input type="text" class="form-control" id="author" value="<%=row.brdwriter%> (<%=row.brdEmail%>)"
					readonly>
			</div>
			<div class="form-group">
				<label for="content"> 내용</label>
				<textarea class="form-control" id="content" readonly><%=row.brdmemo%></textarea>
			</div>
			<div class="form-group">
				<label for="author"> 첨부파일</label>
				<% if(row.path) { %>
					<input type="button" onclick="downloadFile('<%=row.path%>')" value="다운로드">
					<!-- (row.brdFile).replace(/public/g, '') 또는 (row.brdFile).substring((row.brdFile).indexOf('public') + 'public'.length) -->
					<div style="border:1px solid red"><img src="<%=(row.publicUrl)%>" style="width:100%"></div>
					<% }else{ %>
						[없음]
						<% } %>
			</div>
			<a href="#" onclick="history.back(-1)" role="button" class="btn btn-secondary">취소</a>
			<!-- 보안때문에 post 로 변경 
				<a href="boardDelete?brdno=<%=row.brdno%>" class="btn btn-danger">삭제</a> 
				<a href="boardForm?brdno=<%=row.brdno%>" class="btn btn-success">수정</a>
			-->
			<input type="hidden" name="brdno" id="brdno" value="<%=row.brdno%>">
			<a href="#" onclick="window.location.replace('/board/boardList')" role="button"
				class="btn btn-secondary">목록</a>
			<input type="button" class="btn btn-success btn-delete" value="삭제"></button>
			<button class="btn btn-success btn-update">수정</button>
		</form>
	</div>
	<!-- 무료MIT라이센스 : http://suneditor.com/sample/html/getting-started.html -->
	<!-- suneditor 사용법 : https://github.com/JiHong88/SunEditor/blob/master/README.md -->
	<!-- 리액트엣 적용 참조 : https://quarmal.tistory.com/13 -->
	<link href="https://cdn.jsdelivr.net/npm/suneditor@latest/dist/css/suneditor.min.css" rel="stylesheet">
	<script src="https://cdn.jsdelivr.net/npm/suneditor@latest/dist/suneditor.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/suneditor@latest/src/lang/ko.js"></script>
	<script>
		const editor = SUNEDITOR.create(document.getElementById('content'), {
			height: 'auto',
			lang: SUNEDITOR_LANG['ko'],
			resizingBar: false
		});
		editor.toolbar.hide();
		editor.disable();
	</script>
	<script>
		$(document).ready(function () {
			$(".btn-delete").on("click", function () {
				`<% if(logined!=true) { %>`
				//버튼클릭시 비로그인시 로그인 화면으로 유도
				alert("회원만 삭제가 가능합니다.");
				location.href = "/board/loginForm";//자바스크립트 내장기능(href:hyterTextReference:URL이동)
				return false;
				`<% } %>`
				if (`<%=email%>` != `<%=row.brdEmail%>` && `<%=admined%>` != 'true') {
					alert('본인이 작성한 글만 수정/삭제가 가능합니다.');
					return false;
				}
				if (confirm("정말로 삭제 하시겠습니까?")) {
					var brdno = document.querySelector("#brdno");
					$.ajax({
						url: 'boardDelete',
						type: 'POST',
						data: { brdno: brdno.value },  //위에서 선언한 fromdata
						success: function (response) {
							console.log('ajax 성공', response);
							location.replace('/board/boardList');
						},
						error: function (err) {
							console.log(err.status);
							if (err.status) {
								alert('수정/삭제는 본인이 작성한 글만 가능합니다.');
							} else {
								alert(err.status + '알수 없는 오류가 밠생 했습니다.');
							}
						}
					});
				}
			});
		});
	</script>
	<script>
		window.onload = function () {
			var theForm = $('#form_posts')[0];
			$('.btn-update').on('click', function () {
				theForm.action = "boardForm";
				theForm.submit();
			})
			/* 위 코드에 삭제여부 질문 후 진짜 삭제 처리
			var btnDelete = document.querySelector(".btn-delete");
			btnDelete.addEventListener('click', function () {
				var brdno = document.querySelector("[name=brdno]");
				//theForm.action = "boardDelete";
				//theForm.submit();
				$.ajax({
					url: 'boardDelete',
					type: 'POST',
					data: { brdno: brdno.value },  //위에서 선언한 fromdata
					success: function (response) {
						console.log('ajax 성공', response);
						location.replace(document.referrer);
					},
					error: function (err) {
						console.log(err.status);
						if (err.status) {
							alert('수정/삭제는 본인이 작성한 글만 가능합니다.');
						} else {
							alert(err.status + '알수 없는 오류가 밠생 했습니다.');
						}
					}
				});
			});
			*/
		}
	</script>
	<div class="col-md-12">
		<!-- 댓글영역 시작 참조: https://github.com/miniplugin/kimilguk/blob/master/src/main/webapp/WEB-INF/views/home/board/board_view.jsp -->
		<div class="card card-primary card-outline col-12" style="margin-top:10px;margin-bottom:10px;">
			<div class="card-header">
				<h5 class="card-title">Add New Reply</h5>
			</div>
			<form action="#" name="reply_form" method="post">
				<div class="card-body">
					<div class="form-group">
						<label for="replyer">Writer <%= email %></label>
						<input value="<%= name %>" type="text" class="form-control" name="replyer" id="replyer"
							placeholder="로그인 사용자만 입력 가능합니다." readonly required>
						<!-- 폼에서 input같은 입력태그에는 name속성이 반드시 필요, 이유는 DB에 입력할때,
				  값을 전송하게 되는데, 전송값을 담아두는 이름이 name가 되고, 위에서는 writer 입니다. -->
					</div>
					<div class="form-group">
						<label for="reply_text">Reply Text</label>
						<input type="text" class="form-control" name="reply_text" id="reply_text"
							placeholder="내용을 입력해 주세요." required>
						<!-- 아래 게시판에서는 폼을 전송할때 submit 타입을 사용 하지만, 댓글은 Ajax로 전송하기 때문에, button타입으로 지정함. -->
					</div>
					<button type="button" class="btn btn-warning float-left mr-1 text-white"
						id="insertReplyBtn">댓글등록</button>
				</div>
			</form>
			<div class="timeline" style="padding:20px;">
				<!-- .time-label의 before 위치 -->
				<div class="time-label">
					<span data-toggle="collapse" data-target="#div_reply" class="btn btn-danger btn-sm"
						id="btn_reply_list" style="cursor:pointer">Reply
						List[<span id="reply_count">
							<%=row.reply%>
						</span>]&nbsp;&nbsp;</span>
				</div>
				<div id="div_reply" class="timeline collapse">
					<!-- 페이징처리 시작 -->
					<div class="pagination justify-content-center">
						<ul class="pagination pageVO">

						</ul>
					</div>
					<!-- 페이징처리 끝 -->
				</div>
			</div><!-- //.timeline -->
			<input type="hidden" name="prev" id="prev" value="">
			<input type="hidden" name="next" id="next" value="">
		</div>
	</div>
	<!-- 댓글영역 끝 -->
	<!-- 자바스트립트용 #template 엘리먼트 제작. js의 향상된 for문과 같은 역할. 외부 라이브러리를 가져와야 합니다.(아래)-->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/3.0.1/handlebars.js"></script>
	<!-- 댓글리스트 템플릿(빵틀) 반복문 만들기(아래) -->
	<script id="template" type="text/x-handlebars-template">
{{#each .}}
<div class="template-div" data-rno="{{replyno}}">
	<i class="fas fa-envelope bg-blue"></i>
	<div class="timeline-item"><span class="timeline-email" style="font-size: 1rem;font-weight: normal;display: none;">{{brdEmail}}</span>
	<h3 class="timeline-header"><span style="font-size: 1.5rem;">{{replyer}}</span> <span style="font-size: 1rem;font-weight: normal;">{{brddate}}</span></h3>
	<div class="timeline-body">{{reply_text}}</div>
	<div class="timeline-footer">
		<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#replyModal">
			수정
		</button>
	</div>
	</div>
</div>
{{/each}}
	</script>
	<!-- 화면을 재구현Representation하는 함수(아래) -->
	<script>
		var printReplyList = function (data, target, templateObject) {
			var template = Handlebars.compile(templateObject.html());//html태그로 변환
			var html = template(data);//빅데이터를 리스트템플릿에 바인딩 결합시켜주는 역할. 변수html에 저장되었음.
			$(".template-div").remove();//화면에 보이는 댓글리스트만 지우기.
			target.prepend(html);//target은 .time-label 클래스영역을 가리킵니다.
		};
	</script>
	<!-- 댓글 페이징 재구현Representation하는 함수(아래) -->
	<script>
		var printPageVO = function (pageVO, target) {
			var paging = "";
			if (pageVO.prev) {
				paging = paging + '<li class="paginate_button page-item previous" id="example2_previous"><a href=prev=' + (pageVO.prev._fieldsProto.brddate.integerValue) + ' aria-controls="example2" data-dt-idx="0" tabindex="0" class="page-link">Previous</a></li>';
			}
			if (pageVO.next) {
				paging = paging + '<li class="paginate_button page-item next" id="example2_next"><a href=next=' + (pageVO.next._fieldsProto.brddate.integerValue) + ' aria-controls="example2" data-dt-idx="7" tabindex="7" class="page-link">Next</a></li>';
			}
			target.html(paging);
		}
	</script>
	<!-- 댓글리스트에서 수정 버튼을 클릭했을때, 팝업창이 뜨는데, 그 팝업창에 내용을 동적으로 변경시켜주는 구현(아래)  -->
	<script>
		$(document).ready(function () {
			$(".timeline").on("click", ".template-div", function () {//.template-div 댓글 리스트영역
				//$(this);클릭한 댓글에 따라서 this는 첫번째 댓글일 수 도 있고, 두번째 댓글일 수도 있습니다.
				$("#replyno").val($(this).attr("data-rno"));
				$(".modal-title").html($(this).find(".timeline-header").text());
				$("#replytext").val($(this).find(".timeline-body").text());
				$("#brdEmail").val($(this).find(".timeline-email").text());
				//alert("디버그" + $(this).find(".timeline-body").text());
				//마우스클릭으로 선택한 댓글의 .timeline-body영역의 text문자를 
				//모달창의 #replaytext영역에 값으로 입력하겠다.
			});
		});
	</script>
	<!-- Modal -->
	<div class="modal fade" id="replyModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
		aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalLabel">작성자</h5><!-- 작성자는 동적으로 값이 바뀝니다. -->
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<input type="hidden" name="replyno" id="replyno" value="">
					<!-- 상단 $(".timeline").on("click" 액션으로 value값이 채워집니다. -->
					<input type="text" class="form-control" name="replytext" id="replytext" placeholder="내용을 입력해 주세요.">
					<input type="hidden" name="brdEmail" id="brdEmail" value="">
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">닫기</button>
					<button type="button" class="btn btn-primary" id="updateReplyBtn">수정</button>
					<button type="button" class="btn btn-danger" id="deleteReplyBtn">삭제</button>
				</div>
			</div>
		</div>
	</div>
	<form name="action_form">
		<input type="hidden" name="brdno" value="<%=row.brdno%>">
	</form>
	<!-- 댓글 삭제 버튼 액션 처리(아래) -->
	<script>
		$(document).ready(function () {
			$("#deleteReplyBtn").on("click", function () {
				`<% if(logined!=true) { %>`
				//버튼클릭시 비로그인시 로그인 화면으로 유도
				alert("회원만 댓글 삭제가 가능합니다.");
				location.href = "/board/loginForm";//자바스크립트 내장기능(href:hyterTextReference:URL이동)
				return false;
				`<% } %>`
				var brdEmail = $("#brdEmail").val();//겟Get
				if (`<%=email%>` != brdEmail && `<%=admined%>` != 'true') {
					alert('본인이 작성한 댓글만 수정/삭제가 가능합니다.');
					return false;
				}
				var replyno = $("#replyno").val();
				$.ajax({
					type: "post",
					url: "/reply/reply_delete",
					headers: {
						"Content-Type": "application/json",
						"X-HTTP-Method-Override": "PATCH"
					},
					data: JSON.stringify({
						replyno: replyno,
						brdEmail: brdEmail
					}),
					dataType: "json",
					success: function (result) {
						if (result.message == "ok") {
							alert("댓글삭제 성공!");
							var reply_count = $("#reply_count").text();//겟Get
							$("#reply_count").text(parseInt(reply_count) - 1);//셋Set
							replyList();//삭제후 댓글 리스트 재실행.
							$("#replyModal").modal("hide");//모달창을 닫는 JQuery내장함수
						} else {
							alert(result.message);
						}
					},
					error: function (result) {
						alert("RestAPI서버가 작동하지 않습니다.");
					}
				});
			});
		});
	</script>
	<!-- 댓글 수정 버튼 액션 처리(아래) -->
	<script>
		$(document).ready(function () {
			$("#updateReplyBtn").on("click", function () {
				`<% if(logined!=true) { %>`
				//버튼클릭시 비로그인시 로그인 화면으로 유도
				alert("회원만 댓글 수정이 가능합니다.");
				location.href = "/board/loginForm";//자바스크립트 내장기능(href:hyterTextReference:URL이동)
				return false;
				`<% } %>`
				var brdEmail = $("#brdEmail").val();//겟Get
				if (`<%=email%>` != brdEmail && `<%=admined%>` != 'true') {
					alert('본인이 작성한 댓글만 수정/삭제가 가능합니다.');
					return false;
				}
				var reply_text = $("#replytext").val();//겟Get
				var replyno = $("#replyno").val();//겟Get
				$.ajax({
					type: "post",
					url: "/reply/reply_write",
					headers: {
						"Content-Type": "application/json",
						"X-HTTP-Method-Override": "PATCH"
					},
					data: JSON.stringify({
						replyno: replyno,
						reply_text: reply_text,
						brdEmail: brdEmail
					}),
					dataType: "json",
					success: function (result) {
						if (result.message == "ok") {
							alert("댓글 수정 성공!");
							$("#replyModal").modal("hide");
							replyList();//수정 후 댓글리스트 재 호출(실행)
						} else {
							alert(result.message);
						}
					},
					error: function (result) {
						alert("RestAPI서버가 작동하지 않습니다.");
					}
				});
			});
		});
	</script>
	<!-- 댓글 리스트 실행 하는 함수(아래) -->
	<script>
		var replyList = function () {
			var prev = $("#prev").val();//현재 지정된 댓글 페이지 값 가져오기Get
			var next = $("#next").val();//현재 지정된 댓글 페이지 값 가져오기Get
			console.log('prev=', prev, 'next=', next);
			$.ajax({
				url: `/reply/reply_list?brdno=<%=row.brdno%>&prev=` + prev + `&next=` + next,//쿼리스트링으로 보냅니다.
				type: "get",//원래는 get인데, post로 보낼수 있음.
				dataType: "json",
				success: function (result) {
					if (result.rows == "undefined" || result.rows == "" || result.rows == null) {
						if (!result.pagingObj.next) {
							console.log('pagingObj=', result.pagingObj);
							$("#prev").val('');
							$("#next").val('');
						}
						alert("조회된 값이 없습니다.");
					} else {
						printReplyList(result.rows, $("#div_reply"), $("#template"));//댓글리스트출력
						//console.log(result.pagingObj.prev._fieldsProto.brddate.integerValue);
						printPageVO(result.pagingObj, $(".pageVO"));
					}
				},
				error: function () {

				}
			});
		}
	</script>
	<!-- 댓글 리스트 버튼 클릭이벤트 처리(아래) -->
	<script>
		$(document).ready(function () {
			$("#btn_reply_list").on("click", function () {
				//alert("디버그");
				replyList();//댓글 리스트 함수호출
			});
		});
	</script>
	<!-- 댓글 등록 버튼 액션 처리(아래) -->
	<script>
		$(document).ready(function () {
			$("#insertReplyBtn").on("click", function () {//댓글등록버튼을 클릭했을 때 구현내용(아래)
				`<% if(logined!=true) { %>`
				//버튼클릭시 비로그인시 로그인 화면으로 유도
				alert("회원만 댓글 등록이 가능합니다.");
				location.href = "/board/loginForm";//자바스크립트 내장기능(href:hyterTextReference:URL이동)
				return false;
				`<% } %>`
				//alert("디버그");
				//Ajax를 이용해서, 화면을 Representation (REST-API방식) 부분 화면을 재구현(아래)
				var brdno = `<%=row.brdno%>`;
				var reply_text = $("#reply_text").val();//input type은 val()함수로 입력값을 가져올 수 있음.
				var replyer = $("#replyer").val();
				if (reply_text == "" || replyer == "") {
					alert("댓글 내용은 필수 입력 사항입니다.");
					return false;
				}
				$.ajax({//통신프로그램: J쿼리에서 내장된 함수ajax({}); 비동기통신특징(HTTP동기통신-웹페이지의 단점을 해소 Ajax)
					//최초로 상용화 적용되었던 곳이 파일 업로드/다운로드에 Ajax기능의 적용되었습니다.
					//서버(RestAPI서버=컨트롤러)-클라이언트(PC브라우저ajax=jsp단-화면)
					//여기서부터는 프론트 엔드 개발자 영역
					type: 'post',//지금은 html이라서 get방식이지만, jsp로가면, post방식으로 바꿔야 합니다.
					url: '/reply/reply_write',//jsp로 가면, ReplyController 에서 지정한 url로 바꿔야 합니다.
					headers: {
						"Content-Type": "application/json",
						"X-HTTP-Method-Override": "POST"
					},
					data: JSON.stringify({
						brdno: brdno,
						reply_text: reply_text,
						replyer: replyer
					}),//RestAPI서버컨트롤러로 보내는 Json값
					success: function (result) {//응답이 성공하면(상태값200)위경로에서 반환받은 result(json데이터)를 이용해서 화면을 재구현
						var reply_count = $("#reply_count").text();//겟Get
						if (reply_count == "") { reply_count = 0; }//DB 초기값이 null일때 체크
						$("#reply_count").text(parseInt(reply_count) + 1);//셋Set
						//댓글 3페이지를 보고 있다가, 댓글 입력했어요, 본인 작성할 댓글 바로 확인 가능하도록 1page로 가도록 유도
						$("#prev").val(''); //페이징 초기화
						$("#next").val(''); //페이징 초기화
						replyList();//댓글입력 후 리스트 출력함수 호출(실행)
						//$("#replyer").val("");//input박스의 값 제거 
						$("#reply_text").val("");
					},
					error: function (result) {
						alert("RestAPI서버가 작동하지 않습니다.");
					}
				});
			});
		});
	</script>
	<!-- 페이징의 번호 링크액션 함수(아래) -->
	<script>
		$(document).ready(function () {
			$(".pageVO").on("click", "li a", function (event) {
				event.preventDefault();//디폴트 액션 링크이동 방지
				var page = ($(this).attr("href")).split('=');//겟GET
				if (page[0] == 'prev') {
					$("#prev").val(page[1]);
					$("#next").val(''); //페이징 초기화
				}
				if (page[0] == 'next') {
					$("#next").val(page[1]);
					$("#prev").val(''); //페이징 초기화
				}
				//alert("디버그" + page[1]);
				replyList();
			});
		});
	</script>
	<%- include ("../common/footer") %>